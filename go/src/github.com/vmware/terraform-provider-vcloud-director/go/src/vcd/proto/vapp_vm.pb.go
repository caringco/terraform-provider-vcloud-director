// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/vapp_vm.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CreateVappVmInfo struct {
	TargetVmName       string `protobuf:"bytes,1,opt,name=target_vm_name,json=targetVmName" json:"target_vm_name,omitempty"`
	TargetVapp         string `protobuf:"bytes,2,opt,name=target_vapp,json=targetVapp" json:"target_vapp,omitempty"`
	TargetVdc          string `protobuf:"bytes,3,opt,name=target_vdc,json=targetVdc" json:"target_vdc,omitempty"`
	SourceVapp         string `protobuf:"bytes,4,opt,name=source_vapp,json=sourceVapp" json:"source_vapp,omitempty"`
	SourceVmName       string `protobuf:"bytes,5,opt,name=source_vm_name,json=sourceVmName" json:"source_vm_name,omitempty"`
	Hostname           string `protobuf:"bytes,6,opt,name=hostname" json:"hostname,omitempty"`
	Password           string `protobuf:"bytes,7,opt,name=password" json:"password,omitempty"`
	PasswordAuto       bool   `protobuf:"varint,8,opt,name=password_auto,json=passwordAuto" json:"password_auto,omitempty"`
	PasswordReset      bool   `protobuf:"varint,9,opt,name=password_reset,json=passwordReset" json:"password_reset,omitempty"`
	CustScript         string `protobuf:"bytes,10,opt,name=cust_script,json=custScript" json:"cust_script,omitempty"`
	Network            string `protobuf:"bytes,11,opt,name=network" json:"network,omitempty"`
	StorageProfile     string `protobuf:"bytes,12,opt,name=storage_profile,json=storageProfile" json:"storage_profile,omitempty"`
	PowerOn            bool   `protobuf:"varint,13,opt,name=power_on,json=powerOn" json:"power_on,omitempty"`
	AllEulasAccepted   bool   `protobuf:"varint,14,opt,name=all_eulas_accepted,json=allEulasAccepted" json:"all_eulas_accepted,omitempty"`
	SourceCatalogName  string `protobuf:"bytes,15,opt,name=source_catalog_name,json=sourceCatalogName" json:"source_catalog_name,omitempty"`
	SourceTemplateName string `protobuf:"bytes,16,opt,name=source_template_name,json=sourceTemplateName" json:"source_template_name,omitempty"`
	IpAllocationMode   string `protobuf:"bytes,17,opt,name=ip_allocation_mode,json=ipAllocationMode" json:"ip_allocation_mode,omitempty"`
}

func (m *CreateVappVmInfo) Reset()                    { *m = CreateVappVmInfo{} }
func (m *CreateVappVmInfo) String() string            { return proto1.CompactTextString(m) }
func (*CreateVappVmInfo) ProtoMessage()               {}
func (*CreateVappVmInfo) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

func (m *CreateVappVmInfo) GetTargetVmName() string {
	if m != nil {
		return m.TargetVmName
	}
	return ""
}

func (m *CreateVappVmInfo) GetTargetVapp() string {
	if m != nil {
		return m.TargetVapp
	}
	return ""
}

func (m *CreateVappVmInfo) GetTargetVdc() string {
	if m != nil {
		return m.TargetVdc
	}
	return ""
}

func (m *CreateVappVmInfo) GetSourceVapp() string {
	if m != nil {
		return m.SourceVapp
	}
	return ""
}

func (m *CreateVappVmInfo) GetSourceVmName() string {
	if m != nil {
		return m.SourceVmName
	}
	return ""
}

func (m *CreateVappVmInfo) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *CreateVappVmInfo) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *CreateVappVmInfo) GetPasswordAuto() bool {
	if m != nil {
		return m.PasswordAuto
	}
	return false
}

func (m *CreateVappVmInfo) GetPasswordReset() bool {
	if m != nil {
		return m.PasswordReset
	}
	return false
}

func (m *CreateVappVmInfo) GetCustScript() string {
	if m != nil {
		return m.CustScript
	}
	return ""
}

func (m *CreateVappVmInfo) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *CreateVappVmInfo) GetStorageProfile() string {
	if m != nil {
		return m.StorageProfile
	}
	return ""
}

func (m *CreateVappVmInfo) GetPowerOn() bool {
	if m != nil {
		return m.PowerOn
	}
	return false
}

func (m *CreateVappVmInfo) GetAllEulasAccepted() bool {
	if m != nil {
		return m.AllEulasAccepted
	}
	return false
}

func (m *CreateVappVmInfo) GetSourceCatalogName() string {
	if m != nil {
		return m.SourceCatalogName
	}
	return ""
}

func (m *CreateVappVmInfo) GetSourceTemplateName() string {
	if m != nil {
		return m.SourceTemplateName
	}
	return ""
}

func (m *CreateVappVmInfo) GetIpAllocationMode() string {
	if m != nil {
		return m.IpAllocationMode
	}
	return ""
}

type CreateVappVmResult struct {
	Created bool `protobuf:"varint,1,opt,name=created" json:"created,omitempty"`
}

func (m *CreateVappVmResult) Reset()                    { *m = CreateVappVmResult{} }
func (m *CreateVappVmResult) String() string            { return proto1.CompactTextString(m) }
func (*CreateVappVmResult) ProtoMessage()               {}
func (*CreateVappVmResult) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{1} }

func (m *CreateVappVmResult) GetCreated() bool {
	if m != nil {
		return m.Created
	}
	return false
}

type DeleteVappVmInfo struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *DeleteVappVmInfo) Reset()                    { *m = DeleteVappVmInfo{} }
func (m *DeleteVappVmInfo) String() string            { return proto1.CompactTextString(m) }
func (*DeleteVappVmInfo) ProtoMessage()               {}
func (*DeleteVappVmInfo) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{2} }

func (m *DeleteVappVmInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DeleteVappVmResult struct {
	Deleted bool `protobuf:"varint,1,opt,name=deleted" json:"deleted,omitempty"`
}

func (m *DeleteVappVmResult) Reset()                    { *m = DeleteVappVmResult{} }
func (m *DeleteVappVmResult) String() string            { return proto1.CompactTextString(m) }
func (*DeleteVappVmResult) ProtoMessage()               {}
func (*DeleteVappVmResult) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{3} }

func (m *DeleteVappVmResult) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

type ReadVappVmInfo struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *ReadVappVmInfo) Reset()                    { *m = ReadVappVmInfo{} }
func (m *ReadVappVmInfo) String() string            { return proto1.CompactTextString(m) }
func (*ReadVappVmInfo) ProtoMessage()               {}
func (*ReadVappVmInfo) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{4} }

func (m *ReadVappVmInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ReadVappVmResult struct {
	TargetVmName     string `protobuf:"bytes,1,opt,name=target_vm_name,json=targetVmName" json:"target_vm_name,omitempty"`
	TargetVapp       string `protobuf:"bytes,2,opt,name=target_vapp,json=targetVapp" json:"target_vapp,omitempty"`
	TargetVdc        string `protobuf:"bytes,3,opt,name=target_vdc,json=targetVdc" json:"target_vdc,omitempty"`
	SourceVapp       string `protobuf:"bytes,4,opt,name=source_vapp,json=sourceVapp" json:"source_vapp,omitempty"`
	SourceVmName     string `protobuf:"bytes,5,opt,name=source_vm_name,json=sourceVmName" json:"source_vm_name,omitempty"`
	Hostname         string `protobuf:"bytes,6,opt,name=hostname" json:"hostname,omitempty"`
	PasswordAuto     bool   `protobuf:"varint,7,opt,name=password_auto,json=passwordAuto" json:"password_auto,omitempty"`
	PasswordReset    bool   `protobuf:"varint,8,opt,name=password_reset,json=passwordReset" json:"password_reset,omitempty"`
	CustScript       string `protobuf:"bytes,9,opt,name=cust_script,json=custScript" json:"cust_script,omitempty"`
	Network          string `protobuf:"bytes,10,opt,name=network" json:"network,omitempty"`
	StorageProfile   string `protobuf:"bytes,11,opt,name=storage_profile,json=storageProfile" json:"storage_profile,omitempty"`
	PowerOn          bool   `protobuf:"varint,12,opt,name=power_on,json=powerOn" json:"power_on,omitempty"`
	AllEulasAccepted bool   `protobuf:"varint,13,opt,name=all_eulas_accepted,json=allEulasAccepted" json:"all_eulas_accepted,omitempty"`
	Present          bool   `protobuf:"varint,14,opt,name=present" json:"present,omitempty"`
	IsEnabled        bool   `protobuf:"varint,15,opt,name=is_enabled,json=isEnabled" json:"is_enabled,omitempty"`
}

func (m *ReadVappVmResult) Reset()                    { *m = ReadVappVmResult{} }
func (m *ReadVappVmResult) String() string            { return proto1.CompactTextString(m) }
func (*ReadVappVmResult) ProtoMessage()               {}
func (*ReadVappVmResult) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{5} }

func (m *ReadVappVmResult) GetTargetVmName() string {
	if m != nil {
		return m.TargetVmName
	}
	return ""
}

func (m *ReadVappVmResult) GetTargetVapp() string {
	if m != nil {
		return m.TargetVapp
	}
	return ""
}

func (m *ReadVappVmResult) GetTargetVdc() string {
	if m != nil {
		return m.TargetVdc
	}
	return ""
}

func (m *ReadVappVmResult) GetSourceVapp() string {
	if m != nil {
		return m.SourceVapp
	}
	return ""
}

func (m *ReadVappVmResult) GetSourceVmName() string {
	if m != nil {
		return m.SourceVmName
	}
	return ""
}

func (m *ReadVappVmResult) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *ReadVappVmResult) GetPasswordAuto() bool {
	if m != nil {
		return m.PasswordAuto
	}
	return false
}

func (m *ReadVappVmResult) GetPasswordReset() bool {
	if m != nil {
		return m.PasswordReset
	}
	return false
}

func (m *ReadVappVmResult) GetCustScript() string {
	if m != nil {
		return m.CustScript
	}
	return ""
}

func (m *ReadVappVmResult) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *ReadVappVmResult) GetStorageProfile() string {
	if m != nil {
		return m.StorageProfile
	}
	return ""
}

func (m *ReadVappVmResult) GetPowerOn() bool {
	if m != nil {
		return m.PowerOn
	}
	return false
}

func (m *ReadVappVmResult) GetAllEulasAccepted() bool {
	if m != nil {
		return m.AllEulasAccepted
	}
	return false
}

func (m *ReadVappVmResult) GetPresent() bool {
	if m != nil {
		return m.Present
	}
	return false
}

func (m *ReadVappVmResult) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

type UpdateVappVmInfo struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	IsEnabled bool   `protobuf:"varint,2,opt,name=is_enabled,json=isEnabled" json:"is_enabled,omitempty"`
}

func (m *UpdateVappVmInfo) Reset()                    { *m = UpdateVappVmInfo{} }
func (m *UpdateVappVmInfo) String() string            { return proto1.CompactTextString(m) }
func (*UpdateVappVmInfo) ProtoMessage()               {}
func (*UpdateVappVmInfo) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{6} }

func (m *UpdateVappVmInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateVappVmInfo) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

type UpdateVappVmResult struct {
	Updated bool `protobuf:"varint,1,opt,name=updated" json:"updated,omitempty"`
}

func (m *UpdateVappVmResult) Reset()                    { *m = UpdateVappVmResult{} }
func (m *UpdateVappVmResult) String() string            { return proto1.CompactTextString(m) }
func (*UpdateVappVmResult) ProtoMessage()               {}
func (*UpdateVappVmResult) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{7} }

func (m *UpdateVappVmResult) GetUpdated() bool {
	if m != nil {
		return m.Updated
	}
	return false
}

func init() {
	proto1.RegisterType((*CreateVappVmInfo)(nil), "proto.CreateVappVmInfo")
	proto1.RegisterType((*CreateVappVmResult)(nil), "proto.CreateVappVmResult")
	proto1.RegisterType((*DeleteVappVmInfo)(nil), "proto.DeleteVappVmInfo")
	proto1.RegisterType((*DeleteVappVmResult)(nil), "proto.DeleteVappVmResult")
	proto1.RegisterType((*ReadVappVmInfo)(nil), "proto.ReadVappVmInfo")
	proto1.RegisterType((*ReadVappVmResult)(nil), "proto.ReadVappVmResult")
	proto1.RegisterType((*UpdateVappVmInfo)(nil), "proto.UpdateVappVmInfo")
	proto1.RegisterType((*UpdateVappVmResult)(nil), "proto.UpdateVappVmResult")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for VappVm service

type VappVmClient interface {
	// create a VappVm
	Create(ctx context.Context, in *CreateVappVmInfo, opts ...grpc.CallOption) (*CreateVappVmResult, error)
	// delete a VappVm
	Delete(ctx context.Context, in *DeleteVappVmInfo, opts ...grpc.CallOption) (*DeleteVappVmResult, error)
	// Read VappVm
	Read(ctx context.Context, in *ReadVappVmInfo, opts ...grpc.CallOption) (*ReadVappVmResult, error)
	// Update VappVm
	Update(ctx context.Context, in *UpdateVappVmInfo, opts ...grpc.CallOption) (*UpdateVappVmResult, error)
}

type vappVmClient struct {
	cc *grpc.ClientConn
}

func NewVappVmClient(cc *grpc.ClientConn) VappVmClient {
	return &vappVmClient{cc}
}

func (c *vappVmClient) Create(ctx context.Context, in *CreateVappVmInfo, opts ...grpc.CallOption) (*CreateVappVmResult, error) {
	out := new(CreateVappVmResult)
	err := grpc.Invoke(ctx, "/proto.VappVm/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vappVmClient) Delete(ctx context.Context, in *DeleteVappVmInfo, opts ...grpc.CallOption) (*DeleteVappVmResult, error) {
	out := new(DeleteVappVmResult)
	err := grpc.Invoke(ctx, "/proto.VappVm/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vappVmClient) Read(ctx context.Context, in *ReadVappVmInfo, opts ...grpc.CallOption) (*ReadVappVmResult, error) {
	out := new(ReadVappVmResult)
	err := grpc.Invoke(ctx, "/proto.VappVm/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vappVmClient) Update(ctx context.Context, in *UpdateVappVmInfo, opts ...grpc.CallOption) (*UpdateVappVmResult, error) {
	out := new(UpdateVappVmResult)
	err := grpc.Invoke(ctx, "/proto.VappVm/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VappVm service

type VappVmServer interface {
	// create a VappVm
	Create(context.Context, *CreateVappVmInfo) (*CreateVappVmResult, error)
	// delete a VappVm
	Delete(context.Context, *DeleteVappVmInfo) (*DeleteVappVmResult, error)
	// Read VappVm
	Read(context.Context, *ReadVappVmInfo) (*ReadVappVmResult, error)
	// Update VappVm
	Update(context.Context, *UpdateVappVmInfo) (*UpdateVappVmResult, error)
}

func RegisterVappVmServer(s *grpc.Server, srv VappVmServer) {
	s.RegisterService(&_VappVm_serviceDesc, srv)
}

func _VappVm_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVappVmInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VappVmServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.VappVm/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VappVmServer).Create(ctx, req.(*CreateVappVmInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _VappVm_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVappVmInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VappVmServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.VappVm/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VappVmServer).Delete(ctx, req.(*DeleteVappVmInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _VappVm_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadVappVmInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VappVmServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.VappVm/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VappVmServer).Read(ctx, req.(*ReadVappVmInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _VappVm_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVappVmInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VappVmServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.VappVm/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VappVmServer).Update(ctx, req.(*UpdateVappVmInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _VappVm_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.VappVm",
	HandlerType: (*VappVmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _VappVm_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _VappVm_Delete_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _VappVm_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _VappVm_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/vapp_vm.proto",
}

func init() { proto1.RegisterFile("proto/vapp_vm.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 628 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x54, 0xcd, 0x4f, 0xd4, 0x40,
	0x14, 0x07, 0x5c, 0x76, 0xbb, 0x8f, 0x65, 0x29, 0x83, 0x86, 0x81, 0xc4, 0x48, 0x2a, 0x2a, 0x07,
	0xb2, 0x1a, 0xbd, 0x78, 0x32, 0x21, 0xc8, 0xc1, 0x83, 0x1f, 0xa9, 0xca, 0xb5, 0x19, 0xda, 0x07,
	0x36, 0x4e, 0x3b, 0x93, 0xce, 0x14, 0xae, 0xc6, 0xbb, 0xff, 0xb3, 0xe9, 0x9b, 0x69, 0x59, 0x76,
	0xd5, 0xdd, 0xb3, 0x27, 0xf6, 0xfd, 0x3e, 0xde, 0xcc, 0x3c, 0xde, 0xaf, 0xb0, 0xa3, 0x2b, 0x65,
	0xd5, 0xf3, 0x6b, 0xa1, 0x75, 0x72, 0x5d, 0x4c, 0xa8, 0x62, 0xeb, 0xf4, 0x27, 0xfa, 0xb1, 0x0e,
	0xe1, 0x69, 0x85, 0xc2, 0xe2, 0xb9, 0xd0, 0xfa, 0xbc, 0x78, 0x57, 0x5e, 0x2a, 0x76, 0x08, 0x63,
	0x2b, 0xaa, 0x2b, 0xb4, 0xc9, 0x75, 0x91, 0x94, 0xa2, 0x40, 0xbe, 0x7a, 0xb0, 0x7a, 0x34, 0x8c,
	0x47, 0x0e, 0x3d, 0x2f, 0x3e, 0x88, 0x02, 0xd9, 0x23, 0xd8, 0x68, 0x55, 0x42, 0x6b, 0xbe, 0x46,
	0x12, 0xf0, 0x12, 0xa1, 0x35, 0x7b, 0x08, 0xd0, 0x0a, 0xb2, 0x94, 0xdf, 0x23, 0x7e, 0xe8, 0xf9,
	0x2c, 0x6d, 0xfc, 0x46, 0xd5, 0x55, 0x8a, 0xce, 0xdf, 0x73, 0x7e, 0x07, 0x91, 0xff, 0x10, 0xc6,
	0xad, 0xc0, 0x5f, 0x63, 0xdd, 0x5d, 0xc3, 0x6b, 0xdc, 0x35, 0xf6, 0x21, 0xf8, 0xa6, 0x8c, 0x25,
	0xbe, 0x4f, 0x7c, 0x57, 0x37, 0x9c, 0x16, 0xc6, 0xdc, 0xa8, 0x2a, 0xe3, 0x03, 0xc7, 0xb5, 0x35,
	0x7b, 0x0c, 0x9b, 0xed, 0xef, 0x44, 0xd4, 0x56, 0xf1, 0xe0, 0x60, 0xf5, 0x28, 0x88, 0x47, 0x2d,
	0x78, 0x52, 0x5b, 0xc5, 0x9e, 0xc0, 0xb8, 0x13, 0x55, 0x68, 0xd0, 0xf2, 0x21, 0xa9, 0x3a, 0x6b,
	0xdc, 0x80, 0xcd, 0x53, 0xd2, 0xda, 0xd8, 0xc4, 0xa4, 0x55, 0xae, 0x2d, 0x07, 0xf7, 0x94, 0x06,
	0xfa, 0x4c, 0x08, 0xe3, 0x30, 0x28, 0xd1, 0xde, 0xa8, 0xea, 0x3b, 0xdf, 0x20, 0xb2, 0x2d, 0xd9,
	0x33, 0xd8, 0x32, 0x56, 0x55, 0xe2, 0x0a, 0x13, 0x5d, 0xa9, 0xcb, 0x5c, 0x22, 0x1f, 0x91, 0x62,
	0xec, 0xe1, 0x4f, 0x0e, 0x65, 0x7b, 0x10, 0x68, 0x75, 0x83, 0x55, 0xa2, 0x4a, 0xbe, 0x49, 0x97,
	0x18, 0x50, 0xfd, 0xb1, 0x64, 0xc7, 0xc0, 0x84, 0x94, 0x09, 0xd6, 0x52, 0x98, 0x44, 0xa4, 0x29,
	0x6a, 0x8b, 0x19, 0x1f, 0x93, 0x28, 0x14, 0x52, 0x9e, 0x35, 0xc4, 0x89, 0xc7, 0xd9, 0x04, 0x76,
	0xfc, 0x58, 0x53, 0x61, 0x85, 0x54, 0x57, 0x6e, 0xb6, 0x5b, 0x74, 0xea, 0xb6, 0xa3, 0x4e, 0x1d,
	0x43, 0x03, 0x7e, 0x01, 0xf7, 0xbd, 0xde, 0x62, 0xa1, 0xa5, 0xb0, 0xe8, 0x0c, 0x21, 0x19, 0x98,
	0xe3, 0xbe, 0x78, 0x8a, 0x1c, 0xc7, 0xc0, 0x72, 0x9d, 0x08, 0x29, 0x55, 0x2a, 0x6c, 0xae, 0xca,
	0xa4, 0x50, 0x19, 0xf2, 0x6d, 0xd2, 0x87, 0xb9, 0x3e, 0xe9, 0x88, 0xf7, 0x2a, 0xc3, 0x68, 0x02,
	0x6c, 0x7a, 0x03, 0x63, 0x34, 0xb5, 0xa4, 0x89, 0xa5, 0x84, 0x66, 0xb4, 0x7c, 0x41, 0xdc, 0x96,
	0xd1, 0x53, 0x08, 0xdf, 0xa2, 0xc4, 0x3b, 0x1b, 0xcb, 0xa0, 0x37, 0xb5, 0xa7, 0xf4, 0xbb, 0xe9,
	0x3b, 0xad, 0xbb, 0xed, 0x9b, 0x11, 0xda, 0xf5, 0xf5, 0x65, 0x74, 0x08, 0xe3, 0x18, 0x45, 0xb6,
	0xa0, 0xeb, 0xaf, 0x1e, 0x84, 0xb7, 0x32, 0xdf, 0xf4, 0xbf, 0x09, 0xcc, 0x5c, 0x28, 0x06, 0x4b,
	0x85, 0x22, 0x58, 0x22, 0x14, 0xc3, 0x7f, 0x85, 0x02, 0x16, 0x86, 0x62, 0x63, 0x61, 0x28, 0x46,
	0xcb, 0x84, 0x62, 0xf3, 0x2f, 0xa1, 0xe0, 0x30, 0xd0, 0xcd, 0x5b, 0x4a, 0xeb, 0x73, 0xd3, 0x96,
	0xcd, 0x3f, 0x25, 0x37, 0x09, 0x96, 0xe2, 0x42, 0x62, 0x46, 0x29, 0x09, 0xe2, 0x61, 0x6e, 0xce,
	0x1c, 0x10, 0x9d, 0x41, 0xf8, 0x55, 0x67, 0x62, 0xd1, 0x36, 0xce, 0xb4, 0x59, 0x9b, 0x6d, 0x33,
	0x01, 0x36, 0xdd, 0xe6, 0x76, 0x59, 0x6b, 0x42, 0xbb, 0x65, 0xf5, 0xe5, 0xcb, 0x9f, 0x6b, 0xd0,
	0x77, 0x52, 0xf6, 0x06, 0xfa, 0x2e, 0x3f, 0x6c, 0xd7, 0x7d, 0xdb, 0x27, 0xb3, 0x1f, 0xf4, 0xfd,
	0xbd, 0x3f, 0x10, 0xee, 0x88, 0x68, 0xa5, 0xf1, 0xbb, 0x9c, 0x74, 0xfe, 0xd9, 0x78, 0x75, 0xfe,
	0xf9, 0x3c, 0x45, 0x2b, 0xec, 0x35, 0xf4, 0x9a, 0x40, 0xb0, 0x07, 0x5e, 0x74, 0x37, 0x44, 0xfb,
	0xbb, 0x73, 0xf0, 0xf4, 0xc9, 0xee, 0xd1, 0xdd, 0xc9, 0xb3, 0xa3, 0xec, 0x4e, 0x9e, 0x1f, 0x4e,
	0xb4, 0x72, 0xd1, 0x27, 0xee, 0xd5, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x1b, 0x5d, 0x92,
	0xe1, 0x06, 0x00, 0x00,
}
